# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  email: String
  name: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringFilter
  name: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  email: OrderDirection
  name: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  email: String
  name: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  email: String
  name: String
  password: String
}

type Post {
  id: ID!
  title: String
  slug: String
  content: Post_content_Document
  resume: Resume
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  resume: ResumeWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
}

input PostUpdateInput {
  title: String
  slug: String
  content: JSON
  resume: ResumeRelateToOneForUpdateInput
}

input ResumeRelateToOneForUpdateInput {
  create: ResumeCreateInput
  connect: ResumeWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  slug: String
  content: JSON
  resume: ResumeRelateToOneForCreateInput
}

input ResumeRelateToOneForCreateInput {
  create: ResumeCreateInput
  connect: ResumeWhereUniqueInput
}

type Resume {
  id: ID!
  experiences(
    where: ExperienceWhereInput! = {}
    orderBy: [ExperienceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Experience!]
  experiencesCount(where: ExperienceWhereInput! = {}): Int
}

input ResumeWhereUniqueInput {
  id: ID
}

input ResumeWhereInput {
  AND: [ResumeWhereInput!]
  OR: [ResumeWhereInput!]
  NOT: [ResumeWhereInput!]
  id: IDFilter
  experiences: ExperienceManyRelationFilter
}

input ExperienceManyRelationFilter {
  every: ExperienceWhereInput
  some: ExperienceWhereInput
  none: ExperienceWhereInput
}

input ResumeOrderByInput {
  id: OrderDirection
}

input ResumeUpdateInput {
  experiences: ExperienceRelateToManyForUpdateInput
}

input ExperienceRelateToManyForUpdateInput {
  disconnect: [ExperienceWhereUniqueInput!]
  set: [ExperienceWhereUniqueInput!]
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

input ResumeUpdateArgs {
  where: ResumeWhereUniqueInput!
  data: ResumeUpdateInput!
}

input ResumeCreateInput {
  experiences: ExperienceRelateToManyForCreateInput
}

input ExperienceRelateToManyForCreateInput {
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

type Experience {
  id: ID!
  year: Int
  role: String
  employer: Employer
  skills(
    where: SkillWhereInput! = {}
    orderBy: [SkillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Skill!]
  skillsCount(where: SkillWhereInput! = {}): Int
}

input ExperienceWhereUniqueInput {
  id: ID
}

input ExperienceWhereInput {
  AND: [ExperienceWhereInput!]
  OR: [ExperienceWhereInput!]
  NOT: [ExperienceWhereInput!]
  id: IDFilter
  year: IntNullableFilter
  role: StringFilter
  employer: EmployerWhereInput
  skills: SkillManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input SkillManyRelationFilter {
  every: SkillWhereInput
  some: SkillWhereInput
  none: SkillWhereInput
}

input ExperienceOrderByInput {
  id: OrderDirection
  year: OrderDirection
  role: OrderDirection
}

input ExperienceUpdateInput {
  year: Int
  role: String
  employer: EmployerRelateToOneForUpdateInput
  skills: SkillRelateToManyForUpdateInput
}

input EmployerRelateToOneForUpdateInput {
  create: EmployerCreateInput
  connect: EmployerWhereUniqueInput
  disconnect: Boolean
}

input SkillRelateToManyForUpdateInput {
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

input ExperienceUpdateArgs {
  where: ExperienceWhereUniqueInput!
  data: ExperienceUpdateInput!
}

input ExperienceCreateInput {
  year: Int
  role: String
  employer: EmployerRelateToOneForCreateInput
  skills: SkillRelateToManyForCreateInput
}

input EmployerRelateToOneForCreateInput {
  create: EmployerCreateInput
  connect: EmployerWhereUniqueInput
}

input SkillRelateToManyForCreateInput {
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

type Employer {
  id: ID!
  name: String
  url: String
  description: String
}

input EmployerWhereUniqueInput {
  id: ID
}

input EmployerWhereInput {
  AND: [EmployerWhereInput!]
  OR: [EmployerWhereInput!]
  NOT: [EmployerWhereInput!]
  id: IDFilter
  name: StringFilter
  url: StringFilter
  description: StringFilter
}

input EmployerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  url: OrderDirection
  description: OrderDirection
}

input EmployerUpdateInput {
  name: String
  url: String
  description: String
}

input EmployerUpdateArgs {
  where: EmployerWhereUniqueInput!
  data: EmployerUpdateInput!
}

input EmployerCreateInput {
  name: String
  url: String
  description: String
}

type Skill {
  id: ID!
  name: String
}

input SkillWhereUniqueInput {
  id: ID
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  id: IDFilter
  name: StringFilter
}

input SkillOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SkillUpdateInput {
  name: String
}

input SkillUpdateArgs {
  where: SkillWhereUniqueInput!
  data: SkillUpdateInput!
}

input SkillCreateInput {
  name: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createResume(data: ResumeCreateInput!): Resume
  createResumes(data: [ResumeCreateInput!]!): [Resume]
  updateResume(where: ResumeWhereUniqueInput!, data: ResumeUpdateInput!): Resume
  updateResumes(data: [ResumeUpdateArgs!]!): [Resume]
  deleteResume(where: ResumeWhereUniqueInput!): Resume
  deleteResumes(where: [ResumeWhereUniqueInput!]!): [Resume]
  createExperience(data: ExperienceCreateInput!): Experience
  createExperiences(data: [ExperienceCreateInput!]!): [Experience]
  updateExperience(
    where: ExperienceWhereUniqueInput!
    data: ExperienceUpdateInput!
  ): Experience
  updateExperiences(data: [ExperienceUpdateArgs!]!): [Experience]
  deleteExperience(where: ExperienceWhereUniqueInput!): Experience
  deleteExperiences(where: [ExperienceWhereUniqueInput!]!): [Experience]
  createEmployer(data: EmployerCreateInput!): Employer
  createEmployers(data: [EmployerCreateInput!]!): [Employer]
  updateEmployer(
    where: EmployerWhereUniqueInput!
    data: EmployerUpdateInput!
  ): Employer
  updateEmployers(data: [EmployerUpdateArgs!]!): [Employer]
  deleteEmployer(where: EmployerWhereUniqueInput!): Employer
  deleteEmployers(where: [EmployerWhereUniqueInput!]!): [Employer]
  createSkill(data: SkillCreateInput!): Skill
  createSkills(data: [SkillCreateInput!]!): [Skill]
  updateSkill(where: SkillWhereUniqueInput!, data: SkillUpdateInput!): Skill
  updateSkills(data: [SkillUpdateArgs!]!): [Skill]
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteSkills(where: [SkillWhereUniqueInput!]!): [Skill]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  email: String
  name: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  resumes(
    where: ResumeWhereInput! = {}
    orderBy: [ResumeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Resume!]
  resume(where: ResumeWhereUniqueInput!): Resume
  resumesCount(where: ResumeWhereInput! = {}): Int
  experiences(
    where: ExperienceWhereInput! = {}
    orderBy: [ExperienceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Experience!]
  experience(where: ExperienceWhereUniqueInput!): Experience
  experiencesCount(where: ExperienceWhereInput! = {}): Int
  employers(
    where: EmployerWhereInput! = {}
    orderBy: [EmployerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Employer!]
  employer(where: EmployerWhereUniqueInput!): Employer
  employersCount(where: EmployerWhereInput! = {}): Int
  skills(
    where: SkillWhereInput! = {}
    orderBy: [SkillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Skill!]
  skill(where: SkillWhereUniqueInput!): Skill
  skillsCount(where: SkillWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
